import os
from commonfate_provider import loader
from commonfate_provider.provider import DictLoader
from commonfate_provider.runtime import AWSLambdaRuntime

# this package is generated by the PDK packaging process,
# and will exist in the AWS Lambda deployment zip file.

try:
    import commonfate_provider_dist
except ImportError:
    raise ImportError(
        "commonfate_provider_dist didn't exist. Usually this means that the Provider has been incorrectly packaged."
    )


def to_camel_case(snake_str):
    """
    Split each word by seperator "_" and capitalize the
    first letter of each component with '.title()' method and join the result.

    For example, `snake_case` will be converted to `SnakeCase`
    """
    components = snake_str.split("_")

    return "".join(x.title() for x in components)


(Provider, Args) = loader.load_provider()

config_dict = {}
for key in Provider.export_schema():
    config_dict[key] = os.getenv(to_camel_case(key))

config_loader = DictLoader(config_dict=config_dict)
provider = Provider(config_loader)

runtime = AWSLambdaRuntime(
    provider,
    Args,
    name="test",
    version="v0.1.0",
    publisher="commonfate",
)


def lambda_handler(event, context):
    return runtime.handle(event, context)
